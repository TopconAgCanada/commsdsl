#include "cxxtest/TestSuite.h"

#include "comms/iterator.h"
#include "test28/Message.h"
#include "test28/message/Msg1.h"
#include "test28/message/Msg2.h"
#include "test28/frame/Frame.h"

class TestSuite : public CxxTest::TestSuite
{
public:
    void test1();
    void test2();
    void test3();

    using Interface =
        test28::Message<
            comms::option::app::IdInfoInterface,
            comms::option::app::ReadIterator<const std::uint8_t*>,
            comms::option::app::WriteIterator<std::uint8_t*>,
            comms::option::app::LengthInfoInterface,
            comms::option::app::ValidCheckInterface,
            comms::option::app::NameInterface,
            comms::option::app::RefreshInterface
        >;

    TEST28_ALIASES_FOR_ALL_MESSAGES_DEFAULT_OPTIONS(,,Interface);
    using Frame = test28::frame::Frame<Interface>;
};

void TestSuite::test1()
{
    static const std::uint8_t Buf1[] = 
    {
        1, 1, 0xa, 0, 0xb, 0xc, 0xd, 0xe
    };
    static const std::size_t Buf1Size = std::extent<decltype(Buf1)>::value;

    Frame::MsgPtr msgPtr;
    Frame frame;

    auto readIter = comms::readIteratorFor<Interface>(&Buf1[0]);
    auto es = frame.read(msgPtr, readIter, Buf1Size);
    TS_ASSERT_EQUALS(es, comms::ErrorStatus::Success);
    TS_ASSERT(msgPtr);
    TS_ASSERT_EQUALS(msgPtr->getId(), test28::MsgId_M1);
    auto* msg = static_cast<const Msg1*>(msgPtr.get());
    TS_ASSERT_EQUALS(msg->field_variant1().currentField(), 1U);
    TS_ASSERT_EQUALS(msg->field_variant1().accessField_p2().field_val().value(), 0xa);
    TS_ASSERT_EQUALS(msg->field_variant2().currentField(), 0U);
    TS_ASSERT_EQUALS(msg->field_variant2().accessField_p1().field_val().value(), 0x0b0c0d0e);
}

void TestSuite::test2()
{
    Msg2 msg;
    msg.field_f1().initField_p120().field_val().value() = 0xff;
}

void TestSuite::test3()
{
    Msg1 msg;
    msg.field_variant1().initField_p1();
    TS_ASSERT_EQUALS(msg.field_variant1().currentField(), 0U);
    msg.field_variant1().selectField(1U);
    TS_ASSERT_EQUALS(msg.field_variant1().currentField(), 1U);
}
